/**
 * @author Administrator
 *
 */
package com.localhost.part06.priorityQueue;

/**
 * 优先队列(Priority Queue)是一种数据结构，它支持插入(Insert)操作和删除最小值(DeleteMin)或删除最大值(DeleteMax)并返回删除元素操作。
 * 优先队列的这些操作等价于队列的EnQueue和DeQueue操作。区别在于，对于优先队列，元素进入队列的顺序可能与其被操作的顺序不同。简单来说就是优先队列不一定满足先入先出的原则，而是根据元素的优先级来进行操作。
 * 如果最小键值元素拥有最高的优先级，那么这种优先队列叫作升序优先队列(即总是先删除最小的元素)
 * 如果最大键值元素拥有最高的优先级，那么这种优先队列叫作降序优先队列(即总是先删除最大的元素)
 * 
 * 优先队列的主要操作
 * 优先队列是元素的容器，每个元素有一个相关的键值。
 * Insert(key, data)：插入键值为key的数据到优先队列，元素以其key进行排序。
 * DeleteMin/DeleteMax：删除并返回最小/最大键值的元素
 * GetMin/GetMax：返回最小/最大键值的元素，但不删除该元素
 * 第k最小/最大：返回优先队列中键值为第k个最小/最大的元素
 * 大小(Size)：返回优先队列中的元素个数
 * 堆排序(Heap Sort)：基于键值的优先级将优先队列中的元素进行排序
 * 
 * 优先队列的实现主要讨论二叉堆的实现方式
 * 
 * 堆(Heap)是一棵具有特定性质的二叉树。
 * 堆的基本要求是堆中所有节点的值必须大于等于(或小于等于)其孩子节点的值。
 * 堆还要求当h>0时，所有的叶子节点都处于第h或h-1层(其中h为树的高度)，也就是说堆是一棵完全二叉树。
 * 
 * 				7							1
 * 			   / \						   / \
 * 			  3   6						  5   2
 * 			 / \ /						 / \ / \
 * 			1  2 4						6  1 1  3
 * 		该树是堆，每个节点元素都		这棵树不是堆，因为5大于其右孩子1
 * 		大于其孩子节点的元素
 * 
 * 堆的类型：
 * 最小堆：节点值必须小于等于其孩子节点的值
 * 最大堆：节点值必须大于等于其孩子节点的值
 * 
 *  			1						    17
 * 			   / \						   / \
 * 			  15  2						  13  6
 * 			 / \ / \					 / \ / \
 * 			16 174	3					1  4 2  3
 * 			       最小堆						       最大堆
 * 
 * 在二叉堆(Binary Heap)中，每个节点最多有两个孩子。一般在优先队列中二叉堆称作堆(Heap)。
 * 堆的表示：一般使用数组来存储堆中的元素。例如，最大堆可以表示如下：
 * 
 * data		17	13	6	1	4	2	3
 * 			-------------------------
 * index	0	1	2	3	4	5	6
 */










